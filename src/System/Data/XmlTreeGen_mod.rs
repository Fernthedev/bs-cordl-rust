#[cfg(feature = "System+Data+XmlTreeGen")]
#[repr(C)]
#[derive(Debug)]
pub struct XmlTreeGen {
    __cordl_parent: quest_hook::libil2cpp::Il2CppObject,
    pub _constraintNames: *mut crate::System::Collections::ArrayList,
    pub _namespaces: *mut crate::System::Collections::Hashtable,
    pub _autogenerated: *mut crate::System::Collections::Hashtable,
    pub _prefixes: *mut crate::System::Collections::Hashtable,
    pub _ds: *mut crate::System::Data::DataSet,
    pub _tables: *mut crate::System::Collections::ArrayList,
    pub _relations: *mut crate::System::Collections::ArrayList,
    pub _dc: *mut crate::System::Xml::XmlDocument,
    pub _sRoot: *mut crate::System::Xml::XmlElement,
    pub _prefixCount: i32,
    pub _schFormat: crate::System::Data::SchemaFormat,
    pub _filePath: *mut quest_hook::libil2cpp::Il2CppString,
    pub _fileName: *mut quest_hook::libil2cpp::Il2CppString,
    pub _fileExt: *mut quest_hook::libil2cpp::Il2CppString,
    pub _dsElement: *mut crate::System::Xml::XmlElement,
    pub _constraintSeparator: *mut crate::System::Xml::XmlElement,
    pub _targetConverter: *mut crate::System::Converter_2<
        *mut crate::System::Type,
        *mut quest_hook::libil2cpp::Il2CppString,
    >,
}
#[cfg(feature = "System+Data+XmlTreeGen")]
quest_hook::libil2cpp::unsafe_impl_reference_type!(
    in quest_hook::libil2cpp for crate ::System::Data::XmlTreeGen => "System.Data"
    ."XmlTreeGen"
);
#[cfg(feature = "System+Data+XmlTreeGen")]
impl std::ops::Deref for crate::System::Data::XmlTreeGen {
    type Target = quest_hook::libil2cpp::Il2CppObject;
    fn deref(&self) -> &Self::Target {
        unsafe { &self.__cordl_parent }
    }
}
#[cfg(feature = "System+Data+XmlTreeGen")]
impl std::ops::DerefMut for crate::System::Data::XmlTreeGen {
    fn deref_mut(&mut self) -> &mut Self::Target {
        unsafe { &mut self.__cordl_parent }
    }
}
#[cfg(feature = "System+Data+XmlTreeGen")]
impl crate::System::Data::XmlTreeGen {
    pub fn AddColumnProperties(
        &mut self,
        col: *mut crate::System::Data::DataColumn,
        root: *mut crate::System::Xml::XmlElement,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("AddColumnProperties", (col, root))?;
        Ok(__cordl_ret)
    }
    pub fn AddXdoProperties(
        &mut self,
        instance: *mut quest_hook::libil2cpp::Il2CppObject,
        root: *mut crate::System::Xml::XmlElement,
        xd: *mut crate::System::Xml::XmlDocument,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("AddXdoProperties", (instance, root, xd))?;
        Ok(__cordl_ret)
    }
    pub fn AddXdoProperty(
        &mut self,
        pd: *mut crate::System::ComponentModel::PropertyDescriptor,
        instance: *mut quest_hook::libil2cpp::Il2CppObject,
        root: *mut crate::System::Xml::XmlElement,
        xd: *mut crate::System::Xml::XmlDocument,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("AddXdoProperty", (pd, instance, root, xd))?;
        Ok(__cordl_ret)
    }
    pub fn AppendChildWithoutRef(
        &mut self,
        node: *mut crate::System::Xml::XmlElement,
        Namespace: *mut quest_hook::libil2cpp::Il2CppString,
        el: *mut crate::System::Xml::XmlElement,
        refString: *mut quest_hook::libil2cpp::Il2CppString,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("AppendChildWithoutRef", (node, Namespace, el, refString))?;
        Ok(__cordl_ret)
    }
    pub fn AutoGenerated(
        &mut self,
        fk: *mut crate::System::Data::ForeignKeyConstraint,
    ) -> quest_hook::libil2cpp::Result<bool> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: bool = __cordl_object.invoke("AutoGenerated", (fk))?;
        Ok(__cordl_ret)
    }
    pub fn CreateRelations(
        &mut self,
        dt: *mut crate::System::Data::DataTable,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("CreateRelations", (dt))?;
        Ok(__cordl_ret)
    }
    pub fn CreateTablesHierarchy(
        &mut self,
        dt: *mut crate::System::Data::DataTable,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("CreateTablesHierarchy", (dt))?;
        Ok(__cordl_ret)
    }
    pub fn CreateToplevelTables(
        &mut self,
    ) -> quest_hook::libil2cpp::Result<
        *mut quest_hook::libil2cpp::Il2CppArray<*mut crate::System::Data::DataTable>,
    > {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: *mut quest_hook::libil2cpp::Il2CppArray<
            *mut crate::System::Data::DataTable,
        > = __cordl_object.invoke("CreateToplevelTables", ())?;
        Ok(__cordl_ret)
    }
    pub fn FillDataSetElement(
        &mut self,
        xd: *mut crate::System::Xml::XmlDocument,
        ds: *mut crate::System::Data::DataSet,
        dt: *mut crate::System::Data::DataTable,
    ) -> quest_hook::libil2cpp::Result<*mut crate::System::Xml::XmlElement> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: *mut crate::System::Xml::XmlElement = __cordl_object
            .invoke("FillDataSetElement", (xd, ds, dt))?;
        Ok(__cordl_ret)
    }
    pub fn FindTargetNamespace(
        &mut self,
        table: *mut crate::System::Data::DataTable,
    ) -> quest_hook::libil2cpp::Result<*mut quest_hook::libil2cpp::Il2CppString> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: *mut quest_hook::libil2cpp::Il2CppString = __cordl_object
            .invoke("FindTargetNamespace", (table))?;
        Ok(__cordl_ret)
    }
    pub fn FindTypeNode(
        &mut self,
        node: *mut crate::System::Xml::XmlElement,
        strType: *mut quest_hook::libil2cpp::Il2CppString,
    ) -> quest_hook::libil2cpp::Result<*mut crate::System::Xml::XmlElement> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: *mut crate::System::Xml::XmlElement = __cordl_object
            .invoke("FindTypeNode", (node, strType))?;
        Ok(__cordl_ret)
    }
    pub fn GenerateConstraintNames_ArrayList1(
        &mut self,
        tables: *mut crate::System::Collections::ArrayList,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("GenerateConstraintNames", (tables))?;
        Ok(__cordl_ret)
    }
    pub fn GenerateConstraintNames_DataSet2(
        &mut self,
        ds: *mut crate::System::Data::DataSet,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("GenerateConstraintNames", (ds))?;
        Ok(__cordl_ret)
    }
    pub fn GenerateConstraintNames_DataTable__cordl_bool0(
        &mut self,
        table: *mut crate::System::Data::DataTable,
        fromTable: bool,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("GenerateConstraintNames", (table, fromTable))?;
        Ok(__cordl_ret)
    }
    pub fn GetSchema(
        &mut self,
        NamespaceURI: *mut quest_hook::libil2cpp::Il2CppString,
    ) -> quest_hook::libil2cpp::Result<*mut crate::System::Xml::XmlElement> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: *mut crate::System::Xml::XmlElement = __cordl_object
            .invoke("GetSchema", (NamespaceURI))?;
        Ok(__cordl_ret)
    }
    pub fn HandleColumn(
        &mut self,
        col: *mut crate::System::Data::DataColumn,
        dc: *mut crate::System::Xml::XmlDocument,
        schema: *mut crate::System::Xml::XmlElement,
        fWriteOrdinal: bool,
    ) -> quest_hook::libil2cpp::Result<*mut crate::System::Xml::XmlElement> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: *mut crate::System::Xml::XmlElement = __cordl_object
            .invoke("HandleColumn", (col, dc, schema, fWriteOrdinal))?;
        Ok(__cordl_ret)
    }
    pub fn HandleColumnType(
        &mut self,
        col: *mut crate::System::Data::DataColumn,
        dc: *mut crate::System::Xml::XmlDocument,
        root: *mut crate::System::Xml::XmlElement,
        schema: *mut crate::System::Xml::XmlElement,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("HandleColumnType", (col, dc, root, schema))?;
        Ok(__cordl_ret)
    }
    pub fn HandleRelation(
        &mut self,
        rel: *mut crate::System::Data::DataRelation,
        dc: *mut crate::System::Xml::XmlDocument,
    ) -> quest_hook::libil2cpp::Result<*mut crate::System::Xml::XmlElement> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: *mut crate::System::Xml::XmlElement = __cordl_object
            .invoke("HandleRelation", (rel, dc))?;
        Ok(__cordl_ret)
    }
    pub fn HandleTable_DataTable_XmlDocument_XmlElement0(
        &mut self,
        table: *mut crate::System::Data::DataTable,
        dc: *mut crate::System::Xml::XmlDocument,
        schema: *mut crate::System::Xml::XmlElement,
    ) -> quest_hook::libil2cpp::Result<*mut crate::System::Xml::XmlElement> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: *mut crate::System::Xml::XmlElement = __cordl_object
            .invoke("HandleTable", (table, dc, schema))?;
        Ok(__cordl_ret)
    }
    pub fn HandleTable__cordl_bool1(
        &mut self,
        table: *mut crate::System::Data::DataTable,
        dc: *mut crate::System::Xml::XmlDocument,
        schema: *mut crate::System::Xml::XmlElement,
        genNested: bool,
    ) -> quest_hook::libil2cpp::Result<*mut crate::System::Xml::XmlElement> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: *mut crate::System::Xml::XmlElement = __cordl_object
            .invoke("HandleTable", (table, dc, schema, genNested))?;
        Ok(__cordl_ret)
    }
    pub fn HasMixedColumns(
        &mut self,
        table: *mut crate::System::Data::DataTable,
    ) -> quest_hook::libil2cpp::Result<bool> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: bool = __cordl_object.invoke("HasMixedColumns", (table))?;
        Ok(__cordl_ret)
    }
    pub fn HaveExtendedProperties(
        &mut self,
        ds: *mut crate::System::Data::DataSet,
    ) -> quest_hook::libil2cpp::Result<bool> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: bool = __cordl_object.invoke("HaveExtendedProperties", (ds))?;
        Ok(__cordl_ret)
    }
    pub fn IsAutoGenerated(
        &mut self,
        o: *mut quest_hook::libil2cpp::Il2CppObject,
    ) -> quest_hook::libil2cpp::Result<bool> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: bool = __cordl_object.invoke("IsAutoGenerated", (o))?;
        Ok(__cordl_ret)
    }
    pub fn New(
        format: crate::System::Data::SchemaFormat,
    ) -> quest_hook::libil2cpp::Result<*mut Self> {
        let __cordl_object: &mut Self = <Self as quest_hook::libil2cpp::Type>::class()
            .instantiate();
        quest_hook::libil2cpp::ObjectType::as_object_mut(__cordl_object)
            .invoke_void(".ctor", (format))?;
        Ok(__cordl_object)
    }
    pub fn Save_DataSet_DataTable_XmlWriter2(
        &mut self,
        ds: *mut crate::System::Data::DataSet,
        dt: *mut crate::System::Data::DataTable,
        xw: *mut crate::System::Xml::XmlWriter,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("Save", (ds, dt, xw))?;
        Ok(__cordl_ret)
    }
    pub fn Save_DataSet_DataTable_XmlWriter__cordl_bool3(
        &mut self,
        ds: *mut crate::System::Data::DataSet,
        dt: *mut crate::System::Data::DataTable,
        xw: *mut crate::System::Xml::XmlWriter,
        writeHierarchy: bool,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("Save", (ds, dt, xw, writeHierarchy))?;
        Ok(__cordl_ret)
    }
    pub fn Save_DataSet_DataTable_XmlWriter__cordl_bool_Converter_2_4(
        &mut self,
        ds: *mut crate::System::Data::DataSet,
        dt: *mut crate::System::Data::DataTable,
        xw: *mut crate::System::Xml::XmlWriter,
        writeHierarchy: bool,
        multipleTargetConverter: *mut crate::System::Converter_2<
            *mut crate::System::Type,
            *mut quest_hook::libil2cpp::Il2CppString,
        >,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("Save", (ds, dt, xw, writeHierarchy, multipleTargetConverter))?;
        Ok(__cordl_ret)
    }
    pub fn Save_DataSet_XmlWriter0(
        &mut self,
        ds: *mut crate::System::Data::DataSet,
        xw: *mut crate::System::Xml::XmlWriter,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("Save", (ds, xw))?;
        Ok(__cordl_ret)
    }
    pub fn Save_DataTable_XmlWriter1(
        &mut self,
        dt: *mut crate::System::Data::DataTable,
        xw: *mut crate::System::Xml::XmlWriter,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("Save", (dt, xw))?;
        Ok(__cordl_ret)
    }
    pub fn SchemaTree_DataTable1(
        &mut self,
        xd: *mut crate::System::Xml::XmlDocument,
        dt: *mut crate::System::Data::DataTable,
    ) -> quest_hook::libil2cpp::Result<*mut crate::System::Xml::XmlElement> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: *mut crate::System::Xml::XmlElement = __cordl_object
            .invoke("SchemaTree", (xd, dt))?;
        Ok(__cordl_ret)
    }
    pub fn SchemaTree_XmlWriter_DataSet_DataTable__cordl_bool0(
        &mut self,
        xd: *mut crate::System::Xml::XmlDocument,
        xmlWriter: *mut crate::System::Xml::XmlWriter,
        ds: *mut crate::System::Data::DataSet,
        dt: *mut crate::System::Data::DataTable,
        writeHierarchy: bool,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("SchemaTree", (xd, xmlWriter, ds, dt, writeHierarchy))?;
        Ok(__cordl_ret)
    }
    pub fn SetMSDataAttribute(
        &mut self,
        root: *mut crate::System::Xml::XmlElement,
        _cordl_type: *mut crate::System::Type,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("SetMSDataAttribute", (root, _cordl_type))?;
        Ok(__cordl_ret)
    }
    pub fn SetPath(
        &mut self,
        xw: *mut crate::System::Xml::XmlWriter,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("SetPath", (xw))?;
        Ok(__cordl_ret)
    }
    pub fn SetupAutoGenerated_ArrayList1(
        &mut self,
        dt: *mut crate::System::Collections::ArrayList,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("SetupAutoGenerated", (dt))?;
        Ok(__cordl_ret)
    }
    pub fn SetupAutoGenerated_DataSet0(
        &mut self,
        ds: *mut crate::System::Data::DataSet,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("SetupAutoGenerated", (ds))?;
        Ok(__cordl_ret)
    }
    pub fn SetupAutoGenerated_DataTable2(
        &mut self,
        dt: *mut crate::System::Data::DataTable,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("SetupAutoGenerated", (dt))?;
        Ok(__cordl_ret)
    }
    pub fn WriteSchemaRoot(
        &mut self,
        xd: *mut crate::System::Xml::XmlDocument,
        rootSchema: *mut crate::System::Xml::XmlElement,
        targetNamespace: *mut quest_hook::libil2cpp::Il2CppString,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke("WriteSchemaRoot", (xd, rootSchema, targetNamespace))?;
        Ok(__cordl_ret)
    }
    pub fn _ctor(
        &mut self,
        format: crate::System::Data::SchemaFormat,
    ) -> quest_hook::libil2cpp::Result<quest_hook::libil2cpp::Void> {
        let __cordl_object: &mut quest_hook::libil2cpp::Il2CppObject = quest_hook::libil2cpp::ObjectType::as_object_mut(
            self,
        );
        let __cordl_ret: quest_hook::libil2cpp::Void = __cordl_object
            .invoke(".ctor", (format))?;
        Ok(__cordl_ret)
    }
}
#[cfg(feature = "System+Data+XmlTreeGen")]
impl quest_hook::libil2cpp::ObjectType for crate::System::Data::XmlTreeGen {
    fn as_object(&self) -> &quest_hook::libil2cpp::Il2CppObject {
        quest_hook::libil2cpp::ObjectType::as_object(&self.__cordl_parent)
    }
    fn as_object_mut(&mut self) -> &mut quest_hook::libil2cpp::Il2CppObject {
        quest_hook::libil2cpp::ObjectType::as_object_mut(&mut self.__cordl_parent)
    }
}
